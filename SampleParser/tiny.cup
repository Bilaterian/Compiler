/*
  Created by: Fei Song
  File Name: tiny.cup
  To Build: java java_cup.Main < tiny.cup
*/
   
   
/* ----------------------Preliminary Declarations Section--------------------*/
   
/* Import the class java_cup.runtime.*  */
//import java_cup.runtime.*;
import absyn.*;
   
/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

:};
   
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
terminal IF, ELSE, INT, RETURN, VOID, WHILE;
terminal PLUS, MINUS, MULTIPLY, DIVIDE, LESSTHAN, LESSTHANEQUAL, GREATERTHAN, GREATERTHANEQUAL;
terminal EQUALEQUAL, NOTEQUAL, EQUAL, SEMI, COMMA, LPAREN, RPAREN, SQLPAREN, SQRPAREN, CRLPAREN, CRRPAREN;
terminal String ID, NUM;
terminal ERROR;
   
non terminal Exp program;
non terminal ExpList declaration-list, param-list, statement-list, arg-list;
non terminal Exp declaration, var-declaration, fun-declaration, type-specifier, local-declarations;
non terminal Exp compound-stmt, expression-stmt, selection-stmt, iteration-stmt, return-stmt;
non terminal Exp simple-expression, additive-expression;
non terminal Exp params, param, statement, expression, var, relop, addop, term, mulop, factor, call, args;

/* ----------------------------Grammar Section-------------------- */
   
start with program;

program				::= declaration-list ;

declaration-list	::= declaration-list declaration | declaration ;

declaration			::= var-declaration | fun-declaration ;

var-declaration		::= type-specifier ID SEMI | type-specifier ID SQLPAREN NUM SQRPAREN SEMI ;

type-specifier		::= INT | VOID ;

fun-declaration		::= type-specifier ID LPAREN params RPAREN compound-stmt ;

params				::= param-list | VOID ;

param-list			::= param-list COMMA param | param ;

param				::= type-specifier ID type-specifier ID SQLPAREN SQRPAREN ;

compound-stmt		::= CRLPAREN local-declarations statement-list CRRPAREN ;

local-declarations	::= local-declarations var-declaration | ;

statement-list		::= statement-list statement | ;

statement			::= expression-stmt
					  | compound-stmt
					  | selection-stmt
					  | iteration-stmt
					  | return-stmt
					  ;

expression-stmt		::= expression SEMI | SEMI ;

selection-stmt      ::= IF LPAREN expression RPAREN statement
					  | IF LPAREN expression RPAREN statement ELSE statement
					  ;

iteration-stmt		::= WHILE LPAREN expression RPAREN statement ;

return-stmt			::= RETURN expression SEMI | RETURN SEMI ;

expression			::= var EQUAL expression SEMI | simple-expression ;

var					::= ID | ID SQLPAREN expression SQRPAREN ;

simple-expression	::= additive-expression relop additive-expression | additive-expression ;

relop				::= LESSTHANEQUAL 
					  | LESSTHAN 
					  | GREATERTHAN 
					  | GREATERTHANEQUAL 
					  | EQUALEQUAL 
					  | NOTEQUAL
					  ;

additive-expression	::= additive-expression addop term | term ;

addop				::= PLUS | MINUS ;

term				::= term mulop factor | factor ;

mulop				::= MULTIPLY | DIVIDE ;

factor				::= LPAREN expression RPAREN 
					  | var 
					  | call 
					  | NUM
					  ;

call				::= ID LPAREN args RPAREN ;

args				::= arg-list | ;

arg-list			::= arg-list COMMA expression | expression ;

